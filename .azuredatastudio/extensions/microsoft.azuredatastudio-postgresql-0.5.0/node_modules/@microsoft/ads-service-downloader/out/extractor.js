"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the Source EULA. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArchiveExtractor = void 0;
const tar = __importStar(require("tar"));
const eventemitter2_1 = require("eventemitter2");
const zip_1 = require("./zip");
const logger_1 = require("./logger");
/**
 * Helper class to handle extracting the contents of an archive
 */
class ArchiveExtractor {
    constructor() {
        this.eventEmitter = new eventemitter2_1.EventEmitter2({ wildcard: true });
        this.unzipper = new zip_1.Unzipper();
        this.logger = new logger_1.Logger(this.eventEmitter);
    }
    extract(archivePath, targetPath) {
        this.logger.verbose(`Extracting arhive '${archivePath}' to '${targetPath}'.`);
        if (archivePath.match(/\.tar\.gz|\.tar|\.gz$/i)) {
            let entryCount = 0;
            return tar.x({
                file: archivePath,
                cwd: targetPath,
                // Currently just output -1 as total entries as that value isn't easily available using tar without extra work
                onentry: (entry) => this.eventEmitter.emit("entry_extracted" /* Events.ENTRY_EXTRACTED */, entry.path, ++entryCount, -1)
            });
        }
        else {
            // Default to zip extracting if it's not a tarball
            return this.unzipper.extract(archivePath, targetPath);
        }
    }
}
exports.ArchiveExtractor = ArchiveExtractor;
//# sourceMappingURL=extractor.js.map