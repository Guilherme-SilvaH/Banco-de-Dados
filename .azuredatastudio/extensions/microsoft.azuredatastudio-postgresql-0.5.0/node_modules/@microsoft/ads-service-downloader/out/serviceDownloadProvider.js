"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the Source EULA. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceDownloadProvider = void 0;
const fs = __importStar(require("fs"));
const mkdirp = __importStar(require("mkdirp"));
const eventemitter2_1 = require("eventemitter2");
const tmp = __importStar(require("tmp"));
const path = __importStar(require("path"));
const platform_1 = require("./platform");
const httpClient_1 = require("./httpClient");
const errors_1 = require("./errors");
const util_1 = require("util");
const async_retry_1 = __importDefault(require("async-retry"));
const extractor_1 = require("./extractor");
const logger_1 = require("./logger");
/*
* Service Download Provider class which handles downloading the service client
*/
class ServiceDownloadProvider {
    constructor(_config) {
        this._config = _config;
        this.httpClient = new httpClient_1.HttpClient();
        this.extractor = new extractor_1.ArchiveExtractor();
        this.eventEmitter = new eventemitter2_1.EventEmitter2({ wildcard: true });
        // Ensure our temp files get cleaned up in case of error.
        tmp.setGracefulCleanup();
        this.httpClient.eventEmitter.onAny((e, ...args) => {
            this.eventEmitter.emit(e, ...args);
        });
        this.extractor.eventEmitter.onAny((e, ...args) => {
            this.eventEmitter.emit(e, ...args);
        });
        this.logger = new logger_1.Logger(this.eventEmitter);
    }
    /**
     * Returns the download url for given runtime
     */
    getDownloadFileName(runtime) {
        const fileNamesJson = this._config.downloadFileNames;
        this.logger.verbose(`Runtimes specified in the configuration file: ${JSON.stringify(fileNamesJson)}`);
        const runtimesToTry = [runtime, ...(0, platform_1.getFallbackRuntimes)(runtime)];
        this.logger.verbose(`Current runtime and the fallback runtimes: ${JSON.stringify(runtimesToTry)}`);
        let fileName = undefined;
        for (let i = 0; i < runtimesToTry.length; i++) {
            const currentRuntime = runtimesToTry[i];
            this.logger.verbose(`Checking whether a service file is specified for runtime: '${currentRuntime}'.`);
            fileName = fileNamesJson[currentRuntime];
            if (fileName) {
                this.logger.verbose(`Found the service file for runtime: '${currentRuntime}'.`);
                break;
            }
            else {
                this.logger.verbose(`Service file is not specified for runtime: '${currentRuntime}'.`);
            }
        }
        if (fileName === undefined) {
            if (process.platform === 'linux') {
                throw new errors_1.DistributionNotSupportedError('Unsupported linux distribution', process.platform, runtime);
            }
            else {
                throw new errors_1.PlatformNotSupportedError(process.platform);
            }
        }
        return fileName;
    }
    /**
     * Returns SQL tools service installed folder.
     */
    getInstallDirectory(platform) {
        let basePath = this._config.installDirectory;
        let versionFromConfig = this._config.version;
        basePath = basePath.replace('{#version#}', versionFromConfig);
        basePath = basePath.replace('{#platform#}', (0, platform_1.getRuntimeDisplayName)(platform));
        if (!fs.existsSync(basePath)) {
            mkdirp.sync(basePath);
        }
        return basePath;
    }
    getGetDownloadUrl(fileName) {
        let baseDownloadUrl = this._config.downloadUrl;
        let version = this._config.version;
        baseDownloadUrl = baseDownloadUrl.replace('{#version#}', version);
        baseDownloadUrl = baseDownloadUrl.replace('{#fileName#}', fileName);
        return baseDownloadUrl;
    }
    /**
     * Downloads the service and decompress it in the install folder.
     */
    installService(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            const proxy = this._config.proxy;
            const strictSSL = this._config.strictSSL;
            const fileName = this.getDownloadFileName(platform);
            const installDirectory = this.getInstallDirectory(platform);
            const urlString = this.getGetDownloadUrl(fileName);
            const pkg = {
                installPath: installDirectory,
                url: urlString,
                tmpFile: undefined
            };
            const existsAsync = (0, util_1.promisify)(fs.exists);
            const unlinkAsync = (0, util_1.promisify)(fs.unlink);
            const downloadAndInstall = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    pkg.tmpFile = yield this.createTempFile(pkg);
                    this.logger.info(`Downloading the package: '${pkg.url}' to file: '${pkg.tmpFile.name}'`);
                    yield this.httpClient.downloadFile(pkg.url, pkg, proxy, strictSSL);
                    this.logger.info(`Installing the package from file: ${pkg.tmpFile.name}`);
                    yield this.install(pkg);
                }
                finally {
                    // remove the downloaded package file
                    if (yield existsAsync(pkg.tmpFile.name)) {
                        yield unlinkAsync(pkg.tmpFile.name);
                        this.logger.info(`Deleted the package file: ${pkg.tmpFile.name}`);
                    }
                }
            });
            // if this._config.retry is not defined then this.withRetry defaults to number of retries of 0
            // which is same as without retries.
            yield withRetry(downloadAndInstall, this.logger, this._config.retry);
            return true;
        });
    }
    createTempFile(pkg) {
        return new Promise((resolve, reject) => {
            tmp.file({ prefix: 'package-', postfix: path.extname(pkg.url) }, (err, filepath, fd, cleanupCallback) => {
                if (err) {
                    return reject(new Error('Error from tmp.file'));
                }
                resolve({ name: filepath, fd: fd, removeCallback: cleanupCallback });
            });
        });
    }
    install(pkg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.eventEmitter.emit("install_start" /* Events.INSTALL_START */, pkg.installPath);
            yield this.extractor.extract(pkg.tmpFile.name, pkg.installPath);
            this.eventEmitter.emit("install_end" /* Events.INSTALL_END */);
        });
    }
}
exports.ServiceDownloadProvider = ServiceDownloadProvider;
function withRetry(promiseToExecute, logger, retryOptions = { retries: 0 }) {
    return __awaiter(this, void 0, void 0, function* () {
        // wrap function execution with a retry promise
        // by default, it retries 10 times while backing off exponentially.
        // retryOptions parameter can be used to configure how many and how often the retries happen.
        // https://www.npmjs.com/package/promise-retry
        return yield (0, async_retry_1.default)((bail, attemptNo) => __awaiter(this, void 0, void 0, function* () {
            try {
                // run the main operation
                return yield promiseToExecute();
            }
            catch (error) {
                if (/403/.test(error)) {
                    // don't retry upon 403
                    bail(error);
                    return;
                }
                if (attemptNo <= retryOptions.retries) {
                    logger.warn(`[${(new Date()).toLocaleTimeString('en-US', { hour12: false })}] `
                        + `Retrying...   as attempt:${attemptNo} to run '${promiseToExecute.name}' failed with: '${error}'.`);
                }
                // throw back any other error so it can get retried by asyncRetry as appropriate
                throw error;
            }
        }), retryOptions);
    });
}
//# sourceMappingURL=serviceDownloadProvider.js.map